icmp4em - ICMP ping using EventMachine

http://www.github.com/yakischloba/icmp4em

Asynchronous implementation of ICMP ping using EventMachine. Can be used to ping many hosts 
at once in a non-blocking (or blocking) fashion, with callbacks for success, timeout, and host failure/recovery 
based on specified threshold numbers. It was developed as a component for the purpose of monitoring 
multiple WAN connections on a Linux gateway host, and altering the routing table accordingly, to 
provide optimal routing and failover in a situation where only consumer-grade broadband is available.
Should be useful in many situations. Still planning on adding ICMPv6 sometime..

Should work fine with Ruby 1.9.1.

This must be run as effective root user to use the ICMP sockets.

Installation:

git clone git://github.com/yakischloba/icmp4em.git
cd icmp4em
gem build icmp4em.gemspec
sudo gem install icmp4em-<version>.gem


Simple example (see the examples/ directory for the cooler stuff):
============================================================================
require 'rubygems'
require 'icmp4em'

Signal.trap("INT") { EventMachine::stop_event_loop }

host = ICMP4EM::ICMPv4.new("127.0.0.1")
host.on_success {|host, seq, latency| puts "Got echo sequence number #{seq} from host #{host}. It took #{latency}ms." }
host.on_expire {|host, seq, exception| puts "I shouldn't fail on loopback interface, but in case I did: #{exception.to_s}"}

EM.run { host.schedule }
=>
Got echo sequence number 1 from host 127.0.0.1. It took 0.214ms.
Got echo sequence number 2 from host 127.0.0.1. It took 0.193ms.
Got echo sequence number 3 from host 127.0.0.1. It took 0.166ms.
Got echo sequence number 4 from host 127.0.0.1. It took 0.172ms.
Got echo sequence number 5 from host 127.0.0.1. It took 0.217ms.
^C
============================================================================

One issue may run into is that when using this with a lot of hosts, or using EventMachine for other things, 
extra apparent latency will be added. This is simply due to other operations blocking the receipt of the ICMP 
response. For when accurate latency measurement is important, and you can afford to block the reactor, I have 
added a blocking receive mode. To use this simply pass :block => true to the constructor. This will wait for 
the response for the duration of the timeout before passing control back to EventMachine.


jakecdouglas@gmail.com
yakischloba on Freenode


Thanks to the #eventmachine guys for providing a great tool and always being such patient teachers.


Thanks to imperator and the others that worked on the net-ping library. I used the packet construction and checksum
code from that implementation. See their README for detailed acknowledgements.